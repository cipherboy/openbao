// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.21.12
// source: helper/forwarding/types.proto

package forwarding

import (
	logical "github.com/openbao/openbao/sdk/logical"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Not used right now but reserving in case it turns out that streaming
	// makes things more economical on the gRPC side
	// uint64 id = 1;
	Method           string                  `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Url              *URL                    `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	HeaderEntries    map[string]*HeaderEntry `protobuf:"bytes,4,rep,name=header_entries,json=headerEntries,proto3" json:"header_entries,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Body             []byte                  `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
	Host             string                  `protobuf:"bytes,6,opt,name=host,proto3" json:"host,omitempty"`
	RemoteAddr       string                  `protobuf:"bytes,7,opt,name=remote_addr,json=remoteAddr,proto3" json:"remote_addr,omitempty"`
	PeerCertificates [][]byte                `protobuf:"bytes,8,rep,name=peer_certificates,json=peerCertificates,proto3" json:"peer_certificates,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helper_forwarding_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_helper_forwarding_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_helper_forwarding_types_proto_rawDescGZIP(), []int{0}
}

func (x *Request) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Request) GetUrl() *URL {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *Request) GetHeaderEntries() map[string]*HeaderEntry {
	if x != nil {
		return x.HeaderEntries
	}
	return nil
}

func (x *Request) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Request) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Request) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *Request) GetPeerCertificates() [][]byte {
	if x != nil {
		return x.PeerCertificates
	}
	return nil
}

type URL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scheme string `protobuf:"bytes,1,opt,name=scheme,proto3" json:"scheme,omitempty"`
	Opaque string `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// This isn't needed now but might be in the future, so we'll skip the
	// number to keep the ordering in net/url
	// UserInfo user = 3;
	Host    string `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`
	Path    string `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	RawPath string `protobuf:"bytes,6,opt,name=raw_path,json=rawPath,proto3" json:"raw_path,omitempty"`
	// This also isn't needed right now, but we'll reserve the number
	// bool force_query = 7;
	RawQuery string `protobuf:"bytes,8,opt,name=raw_query,json=rawQuery,proto3" json:"raw_query,omitempty"`
	Fragment string `protobuf:"bytes,9,opt,name=fragment,proto3" json:"fragment,omitempty"`
}

func (x *URL) Reset() {
	*x = URL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helper_forwarding_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *URL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URL) ProtoMessage() {}

func (x *URL) ProtoReflect() protoreflect.Message {
	mi := &file_helper_forwarding_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URL.ProtoReflect.Descriptor instead.
func (*URL) Descriptor() ([]byte, []int) {
	return file_helper_forwarding_types_proto_rawDescGZIP(), []int{1}
}

func (x *URL) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *URL) GetOpaque() string {
	if x != nil {
		return x.Opaque
	}
	return ""
}

func (x *URL) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *URL) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *URL) GetRawPath() string {
	if x != nil {
		return x.RawPath
	}
	return ""
}

func (x *URL) GetRawQuery() string {
	if x != nil {
		return x.RawQuery
	}
	return ""
}

func (x *URL) GetFragment() string {
	if x != nil {
		return x.Fragment
	}
	return ""
}

type HeaderEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *HeaderEntry) Reset() {
	*x = HeaderEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helper_forwarding_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeaderEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderEntry) ProtoMessage() {}

func (x *HeaderEntry) ProtoReflect() protoreflect.Message {
	mi := &file_helper_forwarding_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderEntry.ProtoReflect.Descriptor instead.
func (*HeaderEntry) Descriptor() ([]byte, []int) {
	return file_helper_forwarding_types_proto_rawDescGZIP(), []int{2}
}

func (x *HeaderEntry) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Not used right now but reserving in case it turns out that streaming
	// makes things more economical on the gRPC side
	// uint64 id = 1;
	StatusCode uint32 `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Body       []byte `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	// Added in 0.6.2 to ensure that the content-type is set appropriately, as
	// well as any other information
	HeaderEntries map[string]*HeaderEntry `protobuf:"bytes,4,rep,name=header_entries,json=headerEntries,proto3" json:"header_entries,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LastRemoteWal uint64                  `protobuf:"varint,5,opt,name=last_remote_wal,json=lastRemoteWal,proto3" json:"last_remote_wal,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helper_forwarding_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_helper_forwarding_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_helper_forwarding_types_proto_rawDescGZIP(), []int{3}
}

func (x *Response) GetStatusCode() uint32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *Response) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Response) GetHeaderEntries() map[string]*HeaderEntry {
	if x != nil {
		return x.HeaderEntries
	}
	return nil
}

func (x *Response) GetLastRemoteWal() uint64 {
	if x != nil {
		return x.LastRemoteWal
	}
	return 0
}

type LogicalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Not used right now.
	// string replication_ cluster = 2;
	Operation string `protobuf:"bytes,3,opt,name=operation,proto3" json:"operation,omitempty"`
	Path      string `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	// data is serialized to JSON prior to sending.
	Data string `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	// Reserving identifier for future use.
	// storage storage = 6;
	Secret              *LogicalSecret          `protobuf:"bytes,7,opt,name=secret,proto3" json:"secret,omitempty"`
	Auth                *LogicalAuth            `protobuf:"bytes,8,opt,name=auth,proto3" json:"auth,omitempty"`
	Headers             map[string]*HeaderEntry `protobuf:"bytes,9,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Connection          *LogicalConnection      `protobuf:"bytes,10,opt,name=connection,proto3" json:"connection,omitempty"`
	ClientToken         string                  `protobuf:"bytes,11,opt,name=client_token,json=clientToken,proto3" json:"client_token,omitempty"`
	ClientTokenAccessor string                  `protobuf:"bytes,12,opt,name=client_token_accessor,json=clientTokenAccessor,proto3" json:"client_token_accessor,omitempty"`
	DisplayName         string                  `protobuf:"bytes,13,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	MountPoint          string                  `protobuf:"bytes,14,opt,name=mount_point,json=mountPoint,proto3" json:"mount_point,omitempty"`
	MountType           string                  `protobuf:"bytes,15,opt,name=mount_type,json=mountType,proto3" json:"mount_type,omitempty"`
	MountAccessor       string                  `protobuf:"bytes,16,opt,name=mount_accessor,json=mountAccessor,proto3" json:"mount_accessor,omitempty"`
	// Not used right now.
	// string mount_running_version = 17;
	// string mount_running_sha256 = 18;
	// bool mount_is_external_plugin = 19;
	// string mount_class = 20;
	WrapInfo                 *LogicalRequestWrapInfo `protobuf:"bytes,21,opt,name=wrap_info,json=wrapInfo,proto3" json:"wrap_info,omitempty"`
	ClientTokenRemainingUses int32                   `protobuf:"varint,22,opt,name=client_token_remaining_uses,json=clientTokenRemainingUses,proto3" json:"client_token_remaining_uses,omitempty"`
	EntityId                 string                  `protobuf:"bytes,23,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	PolicyOverride           bool                    `protobuf:"varint,24,opt,name=policy_override,json=policyOverride,proto3" json:"policy_override,omitempty"`
	Unauthenticated          bool                    `protobuf:"varint,25,opt,name=unauthenticated,proto3" json:"unauthenticated,omitempty"`
	// JSON serialized prior to sending.
	MfaCreds string `protobuf:"bytes,26,opt,name=mfa_creds,json=mfaCreds,proto3" json:"mfa_creds,omitempty"`
	// Not used right now.
	// LogicalTokenEntry token_entry = 27;
	// int64 last_remote_wal = 28;
	ClientTokenSource int32 `protobuf:"varint,29,opt,name=client_token_source,json=clientTokenSource,proto3" json:"client_token_source,omitempty"`
	// not used right now.
	// HTTPRequest http_request = 30;
	// HTTPResponseWriter ResponseWriter = 31;
	// repeated string required_state = 32;
	// WALState responseState = 33;
	ClientId      string `protobuf:"bytes,34,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ForwardedFrom string `protobuf:"bytes,35,opt,name=forwarded_from,json=forwardedFrom,proto3" json:"forwarded_from,omitempty"`
}

func (x *LogicalRequest) Reset() {
	*x = LogicalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helper_forwarding_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalRequest) ProtoMessage() {}

func (x *LogicalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_helper_forwarding_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalRequest.ProtoReflect.Descriptor instead.
func (*LogicalRequest) Descriptor() ([]byte, []int) {
	return file_helper_forwarding_types_proto_rawDescGZIP(), []int{4}
}

func (x *LogicalRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LogicalRequest) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *LogicalRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *LogicalRequest) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *LogicalRequest) GetSecret() *LogicalSecret {
	if x != nil {
		return x.Secret
	}
	return nil
}

func (x *LogicalRequest) GetAuth() *LogicalAuth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *LogicalRequest) GetHeaders() map[string]*HeaderEntry {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *LogicalRequest) GetConnection() *LogicalConnection {
	if x != nil {
		return x.Connection
	}
	return nil
}

func (x *LogicalRequest) GetClientToken() string {
	if x != nil {
		return x.ClientToken
	}
	return ""
}

func (x *LogicalRequest) GetClientTokenAccessor() string {
	if x != nil {
		return x.ClientTokenAccessor
	}
	return ""
}

func (x *LogicalRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *LogicalRequest) GetMountPoint() string {
	if x != nil {
		return x.MountPoint
	}
	return ""
}

func (x *LogicalRequest) GetMountType() string {
	if x != nil {
		return x.MountType
	}
	return ""
}

func (x *LogicalRequest) GetMountAccessor() string {
	if x != nil {
		return x.MountAccessor
	}
	return ""
}

func (x *LogicalRequest) GetWrapInfo() *LogicalRequestWrapInfo {
	if x != nil {
		return x.WrapInfo
	}
	return nil
}

func (x *LogicalRequest) GetClientTokenRemainingUses() int32 {
	if x != nil {
		return x.ClientTokenRemainingUses
	}
	return 0
}

func (x *LogicalRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *LogicalRequest) GetPolicyOverride() bool {
	if x != nil {
		return x.PolicyOverride
	}
	return false
}

func (x *LogicalRequest) GetUnauthenticated() bool {
	if x != nil {
		return x.Unauthenticated
	}
	return false
}

func (x *LogicalRequest) GetMfaCreds() string {
	if x != nil {
		return x.MfaCreds
	}
	return ""
}

func (x *LogicalRequest) GetClientTokenSource() int32 {
	if x != nil {
		return x.ClientTokenSource
	}
	return 0
}

func (x *LogicalRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *LogicalRequest) GetForwardedFrom() string {
	if x != nil {
		return x.ForwardedFrom
	}
	return ""
}

type LogicalSecret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lease *LogicalLeaseOptions `protobuf:"bytes,1,opt,name=lease,proto3" json:"lease,omitempty"`
	// JSON serialized prior to sending.
	InternalData string `protobuf:"bytes,2,opt,name=internal_data,json=internalData,proto3" json:"internal_data,omitempty"`
	LeaseId      string `protobuf:"bytes,3,opt,name=lease_id,json=leaseId,proto3" json:"lease_id,omitempty"`
}

func (x *LogicalSecret) Reset() {
	*x = LogicalSecret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helper_forwarding_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicalSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalSecret) ProtoMessage() {}

func (x *LogicalSecret) ProtoReflect() protoreflect.Message {
	mi := &file_helper_forwarding_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalSecret.ProtoReflect.Descriptor instead.
func (*LogicalSecret) Descriptor() ([]byte, []int) {
	return file_helper_forwarding_types_proto_rawDescGZIP(), []int{5}
}

func (x *LogicalSecret) GetLease() *LogicalLeaseOptions {
	if x != nil {
		return x.Lease
	}
	return nil
}

func (x *LogicalSecret) GetInternalData() string {
	if x != nil {
		return x.InternalData
	}
	return ""
}

func (x *LogicalSecret) GetLeaseId() string {
	if x != nil {
		return x.LeaseId
	}
	return ""
}

type LogicalLeaseOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ttl       *durationpb.Duration   `protobuf:"bytes,1,opt,name=ttl,proto3" json:"ttl,omitempty"`
	MaxTtl    *durationpb.Duration   `protobuf:"bytes,2,opt,name=max_ttl,json=maxTtl,proto3" json:"max_ttl,omitempty"`
	Renewable bool                   `protobuf:"varint,3,opt,name=renewable,proto3" json:"renewable,omitempty"`
	Increment *durationpb.Duration   `protobuf:"bytes,4,opt,name=increment,proto3" json:"increment,omitempty"`
	IssueTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=issue_time,json=issueTime,proto3" json:"issue_time,omitempty"`
}

func (x *LogicalLeaseOptions) Reset() {
	*x = LogicalLeaseOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helper_forwarding_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicalLeaseOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalLeaseOptions) ProtoMessage() {}

func (x *LogicalLeaseOptions) ProtoReflect() protoreflect.Message {
	mi := &file_helper_forwarding_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalLeaseOptions.ProtoReflect.Descriptor instead.
func (*LogicalLeaseOptions) Descriptor() ([]byte, []int) {
	return file_helper_forwarding_types_proto_rawDescGZIP(), []int{6}
}

func (x *LogicalLeaseOptions) GetTtl() *durationpb.Duration {
	if x != nil {
		return x.Ttl
	}
	return nil
}

func (x *LogicalLeaseOptions) GetMaxTtl() *durationpb.Duration {
	if x != nil {
		return x.MaxTtl
	}
	return nil
}

func (x *LogicalLeaseOptions) GetRenewable() bool {
	if x != nil {
		return x.Renewable
	}
	return false
}

func (x *LogicalLeaseOptions) GetIncrement() *durationpb.Duration {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *LogicalLeaseOptions) GetIssueTime() *timestamppb.Timestamp {
	if x != nil {
		return x.IssueTime
	}
	return nil
}

type LogicalAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lease *LogicalLeaseOptions `protobuf:"bytes,1,opt,name=lease,proto3" json:"lease,omitempty"`
	// JSON serialized prior to sending.
	InternalData     string   `protobuf:"bytes,2,opt,name=internal_data,json=internalData,proto3" json:"internal_data,omitempty"`
	DisplayName      string   `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Policies         []string `protobuf:"bytes,4,rep,name=policies,proto3" json:"policies,omitempty"`
	TokenPolicies    []string `protobuf:"bytes,5,rep,name=token_policies,json=tokenPolicies,proto3" json:"token_policies,omitempty"`
	IdentityPolicies []string `protobuf:"bytes,6,rep,name=identity_policies,json=identityPolicies,proto3" json:"identity_policies,omitempty"`
	// JSON serialized prior to sending.
	ExternalNamespacePolicies string `protobuf:"bytes,7,opt,name=external_namespace_policies,json=externalNamespacePolicies,proto3" json:"external_namespace_policies,omitempty"`
	NoDefaultPolicy           bool   `protobuf:"varint,8,opt,name=no_default_policy,json=noDefaultPolicy,proto3" json:"no_default_policy,omitempty"`
	// JSON serialized prior to sending.
	Metadata       string                  `protobuf:"bytes,9,opt,name=metadata,proto3" json:"metadata,omitempty"`
	ClientToken    string                  `protobuf:"bytes,10,opt,name=client_token,json=clientToken,proto3" json:"client_token,omitempty"`
	Accessor       string                  `protobuf:"bytes,11,opt,name=accessor,proto3" json:"accessor,omitempty"`
	Period         *durationpb.Duration    `protobuf:"bytes,12,opt,name=period,proto3" json:"period,omitempty"`
	ExplicitMaxTtl *durationpb.Duration    `protobuf:"bytes,13,opt,name=explicit_max_ttl,json=explicitMaxTtl,proto3" json:"explicit_max_ttl,omitempty"`
	NumUses        int32                   `protobuf:"varint,14,opt,name=num_uses,json=numUses,proto3" json:"num_uses,omitempty"`
	EntityId       string                  `protobuf:"bytes,15,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Alias          *logical.Alias          `protobuf:"bytes,16,opt,name=alias,proto3" json:"alias,omitempty"`
	GroupAliases   []*logical.Alias        `protobuf:"bytes,17,rep,name=group_aliases,json=groupAliases,proto3" json:"group_aliases,omitempty"`
	BoundCidrs     []string                `protobuf:"bytes,18,rep,name=bound_cidrs,json=boundCidrs,proto3" json:"bound_cidrs,omitempty"`
	CreationPath   string                  `protobuf:"bytes,19,opt,name=creation_path,json=creationPath,proto3" json:"creation_path,omitempty"`
	Orphan         bool                    `protobuf:"varint,20,opt,name=orphan,proto3" json:"orphan,omitempty"`
	PolicyResults  *LogicalPolicyResults   `protobuf:"bytes,21,opt,name=policy_results,json=policyResults,proto3" json:"policy_results,omitempty"`
	MfaRequirement *logical.MFARequirement `protobuf:"bytes,22,opt,name=mfa_requirement,json=mfaRequirement,proto3" json:"mfa_requirement,omitempty"`
	EntityCreated  bool                    `protobuf:"varint,23,opt,name=entity_created,json=entityCreated,proto3" json:"entity_created,omitempty"`
}

func (x *LogicalAuth) Reset() {
	*x = LogicalAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helper_forwarding_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicalAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalAuth) ProtoMessage() {}

func (x *LogicalAuth) ProtoReflect() protoreflect.Message {
	mi := &file_helper_forwarding_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalAuth.ProtoReflect.Descriptor instead.
func (*LogicalAuth) Descriptor() ([]byte, []int) {
	return file_helper_forwarding_types_proto_rawDescGZIP(), []int{7}
}

func (x *LogicalAuth) GetLease() *LogicalLeaseOptions {
	if x != nil {
		return x.Lease
	}
	return nil
}

func (x *LogicalAuth) GetInternalData() string {
	if x != nil {
		return x.InternalData
	}
	return ""
}

func (x *LogicalAuth) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *LogicalAuth) GetPolicies() []string {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *LogicalAuth) GetTokenPolicies() []string {
	if x != nil {
		return x.TokenPolicies
	}
	return nil
}

func (x *LogicalAuth) GetIdentityPolicies() []string {
	if x != nil {
		return x.IdentityPolicies
	}
	return nil
}

func (x *LogicalAuth) GetExternalNamespacePolicies() string {
	if x != nil {
		return x.ExternalNamespacePolicies
	}
	return ""
}

func (x *LogicalAuth) GetNoDefaultPolicy() bool {
	if x != nil {
		return x.NoDefaultPolicy
	}
	return false
}

func (x *LogicalAuth) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *LogicalAuth) GetClientToken() string {
	if x != nil {
		return x.ClientToken
	}
	return ""
}

func (x *LogicalAuth) GetAccessor() string {
	if x != nil {
		return x.Accessor
	}
	return ""
}

func (x *LogicalAuth) GetPeriod() *durationpb.Duration {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *LogicalAuth) GetExplicitMaxTtl() *durationpb.Duration {
	if x != nil {
		return x.ExplicitMaxTtl
	}
	return nil
}

func (x *LogicalAuth) GetNumUses() int32 {
	if x != nil {
		return x.NumUses
	}
	return 0
}

func (x *LogicalAuth) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *LogicalAuth) GetAlias() *logical.Alias {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *LogicalAuth) GetGroupAliases() []*logical.Alias {
	if x != nil {
		return x.GroupAliases
	}
	return nil
}

func (x *LogicalAuth) GetBoundCidrs() []string {
	if x != nil {
		return x.BoundCidrs
	}
	return nil
}

func (x *LogicalAuth) GetCreationPath() string {
	if x != nil {
		return x.CreationPath
	}
	return ""
}

func (x *LogicalAuth) GetOrphan() bool {
	if x != nil {
		return x.Orphan
	}
	return false
}

func (x *LogicalAuth) GetPolicyResults() *LogicalPolicyResults {
	if x != nil {
		return x.PolicyResults
	}
	return nil
}

func (x *LogicalAuth) GetMfaRequirement() *logical.MFARequirement {
	if x != nil {
		return x.MfaRequirement
	}
	return nil
}

func (x *LogicalAuth) GetEntityCreated() bool {
	if x != nil {
		return x.EntityCreated
	}
	return false
}

type LogicalPolicyResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Allowed          bool                 `protobuf:"varint,1,opt,name=allowed,proto3" json:"allowed,omitempty"`
	GrantingPolicies []*LogicalPolicyInfo `protobuf:"bytes,2,rep,name=granting_policies,json=grantingPolicies,proto3" json:"granting_policies,omitempty"`
}

func (x *LogicalPolicyResults) Reset() {
	*x = LogicalPolicyResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helper_forwarding_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicalPolicyResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalPolicyResults) ProtoMessage() {}

func (x *LogicalPolicyResults) ProtoReflect() protoreflect.Message {
	mi := &file_helper_forwarding_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalPolicyResults.ProtoReflect.Descriptor instead.
func (*LogicalPolicyResults) Descriptor() ([]byte, []int) {
	return file_helper_forwarding_types_proto_rawDescGZIP(), []int{8}
}

func (x *LogicalPolicyResults) GetAllowed() bool {
	if x != nil {
		return x.Allowed
	}
	return false
}

func (x *LogicalPolicyResults) GetGrantingPolicies() []*LogicalPolicyInfo {
	if x != nil {
		return x.GrantingPolicies
	}
	return nil
}

type LogicalPolicyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	NamespaceId   string `protobuf:"bytes,2,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	NamespacePath string `protobuf:"bytes,3,opt,name=namespace_path,json=namespacePath,proto3" json:"namespace_path,omitempty"`
	Type          string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *LogicalPolicyInfo) Reset() {
	*x = LogicalPolicyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helper_forwarding_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicalPolicyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalPolicyInfo) ProtoMessage() {}

func (x *LogicalPolicyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_helper_forwarding_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalPolicyInfo.ProtoReflect.Descriptor instead.
func (*LogicalPolicyInfo) Descriptor() ([]byte, []int) {
	return file_helper_forwarding_types_proto_rawDescGZIP(), []int{9}
}

func (x *LogicalPolicyInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LogicalPolicyInfo) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *LogicalPolicyInfo) GetNamespacePath() string {
	if x != nil {
		return x.NamespacePath
	}
	return ""
}

func (x *LogicalPolicyInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type LogicalConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteAddr string `protobuf:"bytes,1,opt,name=remote_addr,json=remoteAddr,proto3" json:"remote_addr,omitempty"`
	RemotePort int32  `protobuf:"varint,2,opt,name=remote_port,json=remotePort,proto3" json:"remote_port,omitempty"`
}

func (x *LogicalConnection) Reset() {
	*x = LogicalConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helper_forwarding_types_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicalConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalConnection) ProtoMessage() {}

func (x *LogicalConnection) ProtoReflect() protoreflect.Message {
	mi := &file_helper_forwarding_types_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalConnection.ProtoReflect.Descriptor instead.
func (*LogicalConnection) Descriptor() ([]byte, []int) {
	return file_helper_forwarding_types_proto_rawDescGZIP(), []int{10}
}

func (x *LogicalConnection) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *LogicalConnection) GetRemotePort() int32 {
	if x != nil {
		return x.RemotePort
	}
	return 0
}

type LogicalRequestWrapInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ttl      *durationpb.Duration `protobuf:"bytes,1,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Format   string               `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	SealWrap bool                 `protobuf:"varint,3,opt,name=seal_wrap,json=sealWrap,proto3" json:"seal_wrap,omitempty"`
}

func (x *LogicalRequestWrapInfo) Reset() {
	*x = LogicalRequestWrapInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helper_forwarding_types_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicalRequestWrapInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalRequestWrapInfo) ProtoMessage() {}

func (x *LogicalRequestWrapInfo) ProtoReflect() protoreflect.Message {
	mi := &file_helper_forwarding_types_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalRequestWrapInfo.ProtoReflect.Descriptor instead.
func (*LogicalRequestWrapInfo) Descriptor() ([]byte, []int) {
	return file_helper_forwarding_types_proto_rawDescGZIP(), []int{11}
}

func (x *LogicalRequestWrapInfo) GetTtl() *durationpb.Duration {
	if x != nil {
		return x.Ttl
	}
	return nil
}

func (x *LogicalRequestWrapInfo) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *LogicalRequestWrapInfo) GetSealWrap() bool {
	if x != nil {
		return x.SealWrap
	}
	return false
}

type LogicalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secret *LogicalSecret `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty"`
	Auth   *LogicalAuth   `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
	// JSON serialized prior to sending.
	Data     string                   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Redirect string                   `protobuf:"bytes,4,opt,name=redirect,proto3" json:"redirect,omitempty"`
	Warnings []string                 `protobuf:"bytes,5,rep,name=warnings,proto3" json:"warnings,omitempty"`
	WrapInfo *LogicalResponseWrapInfo `protobuf:"bytes,6,opt,name=wrap_info,json=wrapInfo,proto3" json:"wrap_info,omitempty"`
	Headers  map[string]*HeaderEntry  `protobuf:"bytes,7,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// skip a few fields to allow extensibility.
	ResponseError string `protobuf:"bytes,99,opt,name=response_error,json=responseError,proto3" json:"response_error,omitempty"`
	MarshalError  string `protobuf:"bytes,100,opt,name=marshal_error,json=marshalError,proto3" json:"marshal_error,omitempty"`
}

func (x *LogicalResponse) Reset() {
	*x = LogicalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helper_forwarding_types_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalResponse) ProtoMessage() {}

func (x *LogicalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_helper_forwarding_types_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalResponse.ProtoReflect.Descriptor instead.
func (*LogicalResponse) Descriptor() ([]byte, []int) {
	return file_helper_forwarding_types_proto_rawDescGZIP(), []int{12}
}

func (x *LogicalResponse) GetSecret() *LogicalSecret {
	if x != nil {
		return x.Secret
	}
	return nil
}

func (x *LogicalResponse) GetAuth() *LogicalAuth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *LogicalResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *LogicalResponse) GetRedirect() string {
	if x != nil {
		return x.Redirect
	}
	return ""
}

func (x *LogicalResponse) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *LogicalResponse) GetWrapInfo() *LogicalResponseWrapInfo {
	if x != nil {
		return x.WrapInfo
	}
	return nil
}

func (x *LogicalResponse) GetHeaders() map[string]*HeaderEntry {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *LogicalResponse) GetResponseError() string {
	if x != nil {
		return x.ResponseError
	}
	return ""
}

func (x *LogicalResponse) GetMarshalError() string {
	if x != nil {
		return x.MarshalError
	}
	return ""
}

type LogicalResponseWrapInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ttl             *durationpb.Duration   `protobuf:"bytes,1,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Token           string                 `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Accessor        string                 `protobuf:"bytes,3,opt,name=accessor,proto3" json:"accessor,omitempty"`
	CreationTime    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	WrappedAccessor string                 `protobuf:"bytes,5,opt,name=wrapped_accessor,json=wrappedAccessor,proto3" json:"wrapped_accessor,omitempty"`
	WrappedEntityId string                 `protobuf:"bytes,6,opt,name=wrapped_entity_id,json=wrappedEntityId,proto3" json:"wrapped_entity_id,omitempty"`
	Format          string                 `protobuf:"bytes,7,opt,name=format,proto3" json:"format,omitempty"`
	CreationPath    string                 `protobuf:"bytes,8,opt,name=creation_path,json=creationPath,proto3" json:"creation_path,omitempty"`
	SealWrap        bool                   `protobuf:"varint,9,opt,name=seal_wrap,json=sealWrap,proto3" json:"seal_wrap,omitempty"`
}

func (x *LogicalResponseWrapInfo) Reset() {
	*x = LogicalResponseWrapInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helper_forwarding_types_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicalResponseWrapInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalResponseWrapInfo) ProtoMessage() {}

func (x *LogicalResponseWrapInfo) ProtoReflect() protoreflect.Message {
	mi := &file_helper_forwarding_types_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalResponseWrapInfo.ProtoReflect.Descriptor instead.
func (*LogicalResponseWrapInfo) Descriptor() ([]byte, []int) {
	return file_helper_forwarding_types_proto_rawDescGZIP(), []int{13}
}

func (x *LogicalResponseWrapInfo) GetTtl() *durationpb.Duration {
	if x != nil {
		return x.Ttl
	}
	return nil
}

func (x *LogicalResponseWrapInfo) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *LogicalResponseWrapInfo) GetAccessor() string {
	if x != nil {
		return x.Accessor
	}
	return ""
}

func (x *LogicalResponseWrapInfo) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *LogicalResponseWrapInfo) GetWrappedAccessor() string {
	if x != nil {
		return x.WrappedAccessor
	}
	return ""
}

func (x *LogicalResponseWrapInfo) GetWrappedEntityId() string {
	if x != nil {
		return x.WrappedEntityId
	}
	return ""
}

func (x *LogicalResponseWrapInfo) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *LogicalResponseWrapInfo) GetCreationPath() string {
	if x != nil {
		return x.CreationPath
	}
	return ""
}

func (x *LogicalResponseWrapInfo) GetSealWrap() bool {
	if x != nil {
		return x.SealWrap
	}
	return false
}

var File_helper_forwarding_types_proto protoreflect.FileDescriptor

var file_helper_forwarding_types_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0a, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x73, 0x64,
	0x6b, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe4, 0x02, 0x0a, 0x07, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x21, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x52, 0x4c, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x4d, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x10, 0x70, 0x65, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x73, 0x1a, 0x59, 0x0a, 0x12, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xb1, 0x01, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61,
	0x77, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x61, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x25, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x92, 0x02, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x4e, 0x0a, 0x0e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x57, 0x61, 0x6c, 0x1a, 0x59, 0x0a, 0x12, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xff, 0x07, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x41, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x32, 0x0a,
	0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x09, 0x77,
	0x72, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x72, 0x61, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x77, 0x72, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x1b,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x18, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x75, 0x6e, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x66, 0x61, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x66, 0x61, 0x43, 0x72, 0x65, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x1a, 0x53, 0x0a, 0x0c,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x86, 0x01, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x19, 0x0a, 0x08, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x22, 0x88, 0x02, 0x0a, 0x13, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12,
	0x32, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6d, 0x61, 0x78,
	0x54, 0x74, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x37, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xde, 0x07, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x41, 0x75, 0x74, 0x68, 0x12, 0x35, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x10, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x6e, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x43,
	0x0a, 0x10, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74,
	0x74, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x4d, 0x61, 0x78,
	0x54, 0x74, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x55, 0x73, 0x65, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x05, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x2e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x12, 0x33, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x2e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x63, 0x69, 0x64, 0x72, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x43, 0x69, 0x64, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x72,
	0x70, 0x68, 0x61, 0x6e, 0x12, 0x47, 0x0a, 0x0e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x0d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x40, 0x0a,
	0x0f, 0x6d, 0x66, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x2e, 0x4d, 0x46, 0x41, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0e, 0x6d, 0x66, 0x61, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x7c, 0x0a, 0x14, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x11, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x10, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x11, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x55, 0x0a, 0x11,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x22, 0x7a, 0x0a, 0x16, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x72, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a,
	0x03, 0x74, 0x74, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x6c, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x65, 0x61, 0x6c, 0x57, 0x72, 0x61, 0x70, 0x22,
	0xe4, 0x03, 0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x06,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x40, 0x0a, 0x09, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57,
	0x72, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x77, 0x72, 0x61, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x42, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x63, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d,
	0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x1a, 0x53, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xea, 0x02, 0x0a, 0x17, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x72, 0x61, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x2a, 0x0a,
	0x11, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x6c, 0x5f, 0x77,
	0x72, 0x61, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x65, 0x61, 0x6c, 0x57,
	0x72, 0x61, 0x70, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6f, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6f, 0x2f, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_helper_forwarding_types_proto_rawDescOnce sync.Once
	file_helper_forwarding_types_proto_rawDescData = file_helper_forwarding_types_proto_rawDesc
)

func file_helper_forwarding_types_proto_rawDescGZIP() []byte {
	file_helper_forwarding_types_proto_rawDescOnce.Do(func() {
		file_helper_forwarding_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_helper_forwarding_types_proto_rawDescData)
	})
	return file_helper_forwarding_types_proto_rawDescData
}

var file_helper_forwarding_types_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_helper_forwarding_types_proto_goTypes = []interface{}{
	(*Request)(nil),                 // 0: forwarding.Request
	(*URL)(nil),                     // 1: forwarding.URL
	(*HeaderEntry)(nil),             // 2: forwarding.HeaderEntry
	(*Response)(nil),                // 3: forwarding.Response
	(*LogicalRequest)(nil),          // 4: forwarding.LogicalRequest
	(*LogicalSecret)(nil),           // 5: forwarding.LogicalSecret
	(*LogicalLeaseOptions)(nil),     // 6: forwarding.LogicalLeaseOptions
	(*LogicalAuth)(nil),             // 7: forwarding.LogicalAuth
	(*LogicalPolicyResults)(nil),    // 8: forwarding.LogicalPolicyResults
	(*LogicalPolicyInfo)(nil),       // 9: forwarding.LogicalPolicyInfo
	(*LogicalConnection)(nil),       // 10: forwarding.LogicalConnection
	(*LogicalRequestWrapInfo)(nil),  // 11: forwarding.LogicalRequestWrapInfo
	(*LogicalResponse)(nil),         // 12: forwarding.LogicalResponse
	(*LogicalResponseWrapInfo)(nil), // 13: forwarding.LogicalResponseWrapInfo
	nil,                             // 14: forwarding.Request.HeaderEntriesEntry
	nil,                             // 15: forwarding.Response.HeaderEntriesEntry
	nil,                             // 16: forwarding.LogicalRequest.HeadersEntry
	nil,                             // 17: forwarding.LogicalResponse.HeadersEntry
	(*durationpb.Duration)(nil),     // 18: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),   // 19: google.protobuf.Timestamp
	(*logical.Alias)(nil),           // 20: logical.Alias
	(*logical.MFARequirement)(nil),  // 21: logical.MFARequirement
}
var file_helper_forwarding_types_proto_depIdxs = []int32{
	1,  // 0: forwarding.Request.url:type_name -> forwarding.URL
	14, // 1: forwarding.Request.header_entries:type_name -> forwarding.Request.HeaderEntriesEntry
	15, // 2: forwarding.Response.header_entries:type_name -> forwarding.Response.HeaderEntriesEntry
	5,  // 3: forwarding.LogicalRequest.secret:type_name -> forwarding.LogicalSecret
	7,  // 4: forwarding.LogicalRequest.auth:type_name -> forwarding.LogicalAuth
	16, // 5: forwarding.LogicalRequest.headers:type_name -> forwarding.LogicalRequest.HeadersEntry
	10, // 6: forwarding.LogicalRequest.connection:type_name -> forwarding.LogicalConnection
	11, // 7: forwarding.LogicalRequest.wrap_info:type_name -> forwarding.LogicalRequestWrapInfo
	6,  // 8: forwarding.LogicalSecret.lease:type_name -> forwarding.LogicalLeaseOptions
	18, // 9: forwarding.LogicalLeaseOptions.ttl:type_name -> google.protobuf.Duration
	18, // 10: forwarding.LogicalLeaseOptions.max_ttl:type_name -> google.protobuf.Duration
	18, // 11: forwarding.LogicalLeaseOptions.increment:type_name -> google.protobuf.Duration
	19, // 12: forwarding.LogicalLeaseOptions.issue_time:type_name -> google.protobuf.Timestamp
	6,  // 13: forwarding.LogicalAuth.lease:type_name -> forwarding.LogicalLeaseOptions
	18, // 14: forwarding.LogicalAuth.period:type_name -> google.protobuf.Duration
	18, // 15: forwarding.LogicalAuth.explicit_max_ttl:type_name -> google.protobuf.Duration
	20, // 16: forwarding.LogicalAuth.alias:type_name -> logical.Alias
	20, // 17: forwarding.LogicalAuth.group_aliases:type_name -> logical.Alias
	8,  // 18: forwarding.LogicalAuth.policy_results:type_name -> forwarding.LogicalPolicyResults
	21, // 19: forwarding.LogicalAuth.mfa_requirement:type_name -> logical.MFARequirement
	9,  // 20: forwarding.LogicalPolicyResults.granting_policies:type_name -> forwarding.LogicalPolicyInfo
	18, // 21: forwarding.LogicalRequestWrapInfo.ttl:type_name -> google.protobuf.Duration
	5,  // 22: forwarding.LogicalResponse.secret:type_name -> forwarding.LogicalSecret
	7,  // 23: forwarding.LogicalResponse.auth:type_name -> forwarding.LogicalAuth
	13, // 24: forwarding.LogicalResponse.wrap_info:type_name -> forwarding.LogicalResponseWrapInfo
	17, // 25: forwarding.LogicalResponse.headers:type_name -> forwarding.LogicalResponse.HeadersEntry
	18, // 26: forwarding.LogicalResponseWrapInfo.ttl:type_name -> google.protobuf.Duration
	19, // 27: forwarding.LogicalResponseWrapInfo.creation_time:type_name -> google.protobuf.Timestamp
	2,  // 28: forwarding.Request.HeaderEntriesEntry.value:type_name -> forwarding.HeaderEntry
	2,  // 29: forwarding.Response.HeaderEntriesEntry.value:type_name -> forwarding.HeaderEntry
	2,  // 30: forwarding.LogicalRequest.HeadersEntry.value:type_name -> forwarding.HeaderEntry
	2,  // 31: forwarding.LogicalResponse.HeadersEntry.value:type_name -> forwarding.HeaderEntry
	32, // [32:32] is the sub-list for method output_type
	32, // [32:32] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_helper_forwarding_types_proto_init() }
func file_helper_forwarding_types_proto_init() {
	if File_helper_forwarding_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_helper_forwarding_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helper_forwarding_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*URL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helper_forwarding_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeaderEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helper_forwarding_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helper_forwarding_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helper_forwarding_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicalSecret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helper_forwarding_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicalLeaseOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helper_forwarding_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicalAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helper_forwarding_types_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicalPolicyResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helper_forwarding_types_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicalPolicyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helper_forwarding_types_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicalConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helper_forwarding_types_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicalRequestWrapInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helper_forwarding_types_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helper_forwarding_types_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicalResponseWrapInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_helper_forwarding_types_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_helper_forwarding_types_proto_goTypes,
		DependencyIndexes: file_helper_forwarding_types_proto_depIdxs,
		MessageInfos:      file_helper_forwarding_types_proto_msgTypes,
	}.Build()
	File_helper_forwarding_types_proto = out.File
	file_helper_forwarding_types_proto_rawDesc = nil
	file_helper_forwarding_types_proto_goTypes = nil
	file_helper_forwarding_types_proto_depIdxs = nil
}
